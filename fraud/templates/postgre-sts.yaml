apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: db
  labels:
    app: "{{ .Values.env_db.app}}"
    version: "{{ .Values.env_db.version}}"
spec:
  serviceName: "postgresql"
  replicas: 1
  template:
    metadata:
      labels:
        app: "{{ .Values.env_db.app}}"
        version: "{{ .Values.env_db.version}}"
      annotations:
        kubernetes.io/ingress-bandwidth: "100M"
        kubernetes.io/egress-bandwidth: "100M"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
      {{- if .Values.log_backups.enabled }}
      - name: log-archiver
        image: {{ .Values.log_backups.image }}
        command:
        - watch
        - -n
        - "{{ .Values.log_backups.period_in_seconds }}"
        - |
          gcloud auth activate-service-account \
            {{ .Values.log_backups.account }} \
            --key-file={{ .Values.log_backups.key_file_path }}
           gsutil -m rsync -r -J \
            {{ .Values.log_backups.log_folder }} \
            {{ .Values.log_backups.bucket }}
        volumeMounts:
        - mountPath: /service-account
          name: service-account-config
        - mountPath: /var/lib/postgresql
          name: "{{ .Values.env_db.app}}"
      {{ end }}
      - name: fraud-postgresql
        image: {{ .Values.image_db.repository }}:{{ .Values.image_db.tag }}
        imagePullPolicy: IfNotPresent
        ports:
          - name: "{{ .Values.env_db.app}}"
            containerPort: {{ .Values.env_db.db_port }}
        env:
          - name: POSTGRES_USER
            value: "{{ .Values.env_db.POSTGRES_USER}}"
          - name: POSTGRES_PASSWORD
  {{- if .Values.env_db.POSTGRES_PASSWORD }}
            value: "{{ .Values.env_db.POSTGRES_PASSWORD }}"
  {{ else }}
            valueFrom:
             secretKeyRef:
               name: db
               key: DB_PASSWORD
  {{- end }}
          - name: PGDATA
            value: "{{ .Values.env_db.PGDATA}}"
          - name: POSTGRES_DB
            value: "{{ .Values.env_db.POSTGRES_DB}}"
          - name: REPLICATOR_USER
  {{- if .Values.env_db.REPLICATOR_PASSWORD }}
            value: "{{ .Values.env_db.REPLICATOR_PASSWORD }}"
  {{ else }}
            valueFrom:
             secretKeyRef:
               name: db
               key: REPLICATOR_PASSWORD
  {{- end }}
          - name: REPLICATOR_PASSWORD
            value: "{{ .Values.env_db.REPLICATOR_PASSWORD}}"
        volumeMounts:
        - mountPath: /var/lib/postgresql
          name: "{{ .Values.env_db.app}}"
        resources:
          requests:
            cpu: {{ .Values.resources_db.cpu }}
            memory: {{ .Values.resources_db.memory }}
          limits:
            cpu: 2
            memory: {{ .Values.resources_db.limits_memory }}
        readinessProbe:
          timeoutSeconds: 3
          initialDelaySeconds: 5
          tcpSocket:
            port: postgresql
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -h
            - localhost
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
      {{- if .Values.nodeSelector_db }}
      nodeSelector:
        cloud.google.com/gke-nodepool: {{ .Values.nodeSelector_db}}
      {{- end}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              namespaces:
                - gateway
                - il
                - man
                - mithril
                - ops
                - prm
                - uaddresses
                - verification
              labelSelector:
                matchLabels:
                  app: "{{ .Values.env_db.app}}"
              topologyKey: "kubernetes.io/hostname"
      {{- if .Values.log_backups.enabled }}
      volumes:
      - name: service-account-config
        secret:
          secretName: psql-logs-backup-maker
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: postgresql
      labels:
        app: "{{ .Values.env_db.app}}"
        version: "{{ .Values.env_db.version}}"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.resources_db.storage}}
          {{- if .Values.volumeName }}
      volumeName:  {{ .Values.volumeName }}
          {{- end}}
